{"version":3,"sources":["Styles/Canvas.module.css","Styles/SecondCanvas.module.css","Components/SecondCanvas.js","Components/Header.js","Components/Canvas.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SecondCanvas","React","forwardRef","props","ref","Typography","variant","color","className","styles","title","hideGrid","disabled","canvasWidth","canvasHeight","draw","Header","AppBar","position","Toolbar","Canvas","useState","initial","setColor","brush","setBrush","width","setWidth","height","setHeight","Draw","useRef","secondDraw","buttonDonwload","Grid","container","item","lg","md","sm","xs","Styles","Title","TextField","label","type","min","value","onChange","event","parseInt","target","Cajas","max","ButtonGroup","aria-label","buttons","Button","onClick","data","current","getSaveData","loadSaveData","startIcon","clear","undo","initialValue","Chooser","brushRadius","brushColor","hex","data1","canvasContainer","children","toDataURL","link","document","createElement","nombreunico","Math","floor","random","download","href","click","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.55bf44fa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Canvas_container__1DeFx\",\"Title\":\"Canvas_Title__2GyGN\",\"buttons\":\"Canvas_buttons__2Wvkl\",\"Chooser\":\"Canvas_Chooser__kcs5y\",\"Canvas\":\"Canvas_Canvas__KxVJD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"draw\":\"SecondCanvas_draw__2Ajv3\",\"title\":\"SecondCanvas_title__3ZJ4Y\"};","import React from \"react\";\nimport CanvasDraw from \"react-canvas-draw\";\nimport styles from '../Styles/SecondCanvas.module.css'\nimport { Typography } from \"@material-ui/core\";\n\nconst SecondCanvas = React.forwardRef((props, ref) => {\n  return (\n    <div>\n      <Typography variant=\"h5\" color=\"primary\" className={styles.title}>CANVAS RESULT</Typography>\n      <CanvasDraw hideGrid={true} disabled={true} canvasWidth={500} canvasHeight={500} ref={ref} className={styles.draw} />\n    </div>\n  );\n});\n\nexport default SecondCanvas;\n","import React from 'react'\nimport {AppBar, Toolbar, Typography} from '@material-ui/core'\nimport GestureIcon from \"@material-ui/icons/Gesture\";\n\nconst Header = () => {\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <GestureIcon/>\n        <Typography variant=\"h6\">Canvas para descargar</Typography>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nexport default Header\n","import React, { useRef, useState } from \"react\";\nimport CanvasDraw from \"react-canvas-draw\";\nimport SecondCanvas from './SecondCanvas'\nimport Header from './Header'\nimport InputColor from \"react-input-color\";\nimport { Grid, Typography, TextField, Button, ButtonGroup } from \"@material-ui/core\";\nimport Styles from '../Styles/Canvas.module.css'\nimport SaveAltIcon from \"@material-ui/icons/SaveAlt\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\n\nconst Canvas = () => {\n  const [initial, setInitial] = useState(\"#ee5253\");\n  const [color, setColor] = useState({});\n\n  const [brush, setBrush] = useState(10);\n  const [width, setWidth] = useState(500);\n  const [height, setHeight] = useState(500);\n\n  const Draw = useRef(null);\n  const secondDraw = useRef(null);\n  const buttonDonwload = useRef(null);\n\n  const handleSave = () => {\n    const data = Draw.current.getSaveData();\n    secondDraw.current.loadSaveData(data, false);\n  };\n  const download = () => {\n    const data1 = Draw.current.canvasContainer.children[1].toDataURL(\"image/png\")\n    var link = document.createElement('a');\n    const nombreunico = Math.floor(Math.random() * 999999)\n    link.download = `${nombreunico}.png`;\n    link.href = data1;\n    link.click();\n    Draw.current.clear();\n  }\n  const handleClear = () => {\n    Draw.current.clear();\n  };\n\n  const handleBack = () => {\n    Draw.current.undo();\n  };\n\n  const brushSize = event => {\n    setBrush(parseInt(event.target.value, 10));\n  };\n\n  const widthSize = event => {\n    setWidth(parseInt(event.target.value, 10));\n  };\n\n  const heightSize = event => {\n    setHeight(parseInt(event.target.value, 10));\n  };\n\n  return (\n    <Grid container>\n      <Grid item lg={12} md={12} sm={12} xs={12}>\n        <Header />\n      </Grid>\n\n      <Grid item lg={2} md={4} sm={12} xs={12} className={Styles.container}>\n        <Typography variant=\"h5\" color=\"primary\" className={Styles.Title}>\n          {\" \"}\n          Herramientas\n        </Typography>\n\n        <TextField\n          label=\"Brush Size\"\n          type=\"number\"\n          variant=\"outlined\"\n          min={1}\n          value={brush}\n          onChange={brushSize}\n          className={Styles.Cajas}\n        />\n        <hr />\n        <TextField\n          label=\"Width\"\n          type=\"number\"\n          variant=\"outlined\"\n          min={50}\n          max={400}\n          value={width}\n          onChange={widthSize}\n        />\n        <hr />\n        <TextField\n          label=\"Height\"\n          type=\"number\"\n          variant=\"outlined\"\n          min={50}\n          max={400}\n          value={height}\n          onChange={heightSize}\n        />\n\n        <ButtonGroup\n          variant=\"contained\"\n          color=\"primary\"\n          aria-label=\"contained primary button group\"\n          className={Styles.buttons}\n        >\n          <Button\n            onClick={handleSave}\n            variant=\"contained\"\n            color=\"secondary\"\n            startIcon={<SaveAltIcon />}\n          >\n            SAVE\n          </Button>\n          <Button\n            onClick={handleClear}\n            variant=\"contained\"\n            color=\"secondary\"\n            startIcon={<DeleteIcon />}\n          >\n            CLEAN\n          </Button>\n          <Button\n            onClick={handleBack}\n            variant=\"contained\"\n            color=\"secondary\"\n            startIcon={<ArrowBackIcon />}\n          >\n            BACK\n          </Button>\n        </ButtonGroup>\n\n        <Typography variant=\"h6\" color=\"primary\" className={Styles.Title}>\n          Choose the color\n        </Typography>\n        <InputColor\n          initialValue={initial}\n          onChange={setColor}\n          className={Styles.Chooser}\n        />\n      </Grid>\n\n      <Grid item lg={5} md={8} sm={12} xs={12}>\n        <Typography variant=\"h5\" color=\"primary\" className={Styles.Title}>\n          CANVAS DRAW\n        </Typography>\n        <CanvasDraw\n          brushRadius={brush}\n          brushColor={color.hex}\n          canvasWidth={width}\n          canvasHeight={height}\n          hideGrid={false}\n          ref={Draw}\n          className={Styles.Canvas}\n        />\n      </Grid>\n\n      <Grid item lg={5} md={12} sm={12} xs={12}>\n        <SecondCanvas ref={secondDraw} />\n      </Grid>\n      <Button\n        onClick={download}\n        ref={buttonDonwload}\n        variant=\"contained\"\n        color=\"secondary\"\n        startIcon={<SaveAltIcon />}\n      >\n        DOWNLOAD\n          </Button>\n    </Grid>\n  );\n};\n\nexport default Canvas;\n","import React from 'react';\nimport Canvas from './Components/Canvas'\n\n\nfunction App() {\n  return (\n    <div className=\"\">\n      <Canvas/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}